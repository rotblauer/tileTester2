#!/usr/bin/env bash



# # The Overview
# server tracks.db(bolt) -> local tippecanoe -> local out.mbtiles (+ out.json) -> local tippedcanoetrack.db(bolt) -> server punktlich.rotblauer.com/

# update tracks from API bolt.db on Freya to local
echo "------------------------------------------"
echo "Syncing remote tracks.db --> local..."
echo

rsync -avzLh --progress freya:~/track.areteh.co/db/tracks.db ./

# # Specifics
# ^ tracks.db is bolt database for API that receives incoming tracks from mobile cat trackering devices. catmobileTracks ios.
#    those points are stored as struct trackPoint.TrackPoints.


# tldr
# dump.go runs tracks.db(bolty) through `$ tippecanoe` which builds sensible vector mbtiles
# that .mbtiles file is then transferred back to a bolt.db file and sent back up to serve.
#
# !tldr
# v tippecanoe is a C++ cli program that organizes and builds points to vector mbtiles. it does a lot of logic about how to show a lot of points cleverly. there are options.
#    data generated is in .mbtiles format and .json. .mbtiles is readable by a sqlite3 interface, and tile data is gzipped.
#
# last step of dump.go is undump/undump.go, which reads the .mbtiles/sqlite3 data back into a bolt.db
# that .db (named tippedcanoetrack.db by default) is then synced to the punktlich.rotblauer.com domain as tester.db
#
# punktlich runs a tile server (by default on port :8081?think).
# after running ./getem, you'll need to ssh freya and ./punktlich.rotblauer.com/kickstart for the changes to take effect

# Clear out old out.json/mbtiles. Was getting 'tippecanoe: create metadata table: table metadata already exists'
echo "------------------------------------------"
echo "Cleaning up old artifacts..."
echo
rm ./out*

# for f in ./*; do
#     if [[ "$f" =~ "out"* ]]; then
#         if [[ -d "$f" ]]; then
#             rm -rf "$f"
#         else
#             rm "$f"
#         fi
#     fi
# done
rm ./tippedcanoetrack.db # in case there's some smudgeying due to CTRL-Cing during a gettingem or something. tabulara rastafaria n all dat
rm ./tippedcanoetrack.db.gz #ibid, plus gzip always asks to replace

# exit if any error
set -e

echo "------------------------------------------"
echo "Running dump.go..."
echo
rebuild=1
if [[ -f "dumper" ]]; then
    read -p "Found pre-existing 'dumper' binary (built from dump.go). Rebuild? (y/n)? " choice
    case "$choice" in
      y|Y ) echo ;;
      n|N ) echo "Skipping rebuild of dump.go -> ./dumper ..." && echo && rebuild=0;;
      * ) echo "Invalid choice." && exit 1;;
    esac
fi
if [[ rebuild -eq 1 ]]; then
    echo "> go build -o dumper dump.go ..."
    go build -o dumper dump.go
fi
./dumper
# rm ./dump
# go run dump.go

# Gzip it for uploading
echo "------------------------------------------"
echo "gzipping tippedcanoetrack.db -> tippedcanoetrack.db.gz for uploading..."
echo
gzip --best --keep --verbose ./tippedcanoetrack.db

# sync newly created/update bolty db back to punktlich, finally
echo "------------------------------------------"
echo "** Syncing fresh bolt.db back to punktlich.rotblauer.com..."
echo
rsync -avzLh --progress ./tippedcanoetrack.db.gz freya:~/punktlich.rotblauer.com/tippedcanoetrack.db.gz #/tester.db

# And update locally too for development.
echo "------------------------------------------"
echo "Copying fresh tippedcanoetrack.db -> TileServer/tester.db..."
echo
cp tippedcanoetrack.db ./TileServer/tester.db

# Develop
# cd TileServer && ./TileServer

# Deploy
#
# __the tile server
# env GOOS=linux go build -o TileServer.linux && rsync -avzLh --progress TileServer.linux freya:~/punktlich.rotblauer.com/
# ssh freya && ./punktlich.rotblauer.com/kickstart
#
# __the front end
# cd TileServer && rsync -avzLh --progress index.js app.js freya:~/punktlich.rotblauer.com/


# ------------------------------------------
#easy_install mbutil
#mb-util out.mbtiles test --image_format=png


#http://gis.stackexchange.com/questions/3712/create-vector-tiles-for-polymaps
#http://gis.stackexchange.com/questions/65735/geojson-in-leaflet


#https://github.com/klokantech/vector-tiles-sample


#mb-util --image_format=png out.mbtiles test/web

#tippecanoe-decode out.mbtiles |more
#!/usr/bin/env bash
echo "------------------------------------------"
echo "Replacing old db with new db on Freya and kickstarting tile server..."
echo

ssh freya <<\EOI
cd punktlich.rotblauer.com
gzip --decompress ./tippedcanoetrack.db.gz
mv ./tippedcanoetrack.db ./tester.db
./kickstart
exit
EOI
